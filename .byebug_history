continue
artist.user
artist
continue
params
continue
params
params[:email]
email
artist.user
artist
artist.user_confirmation_token == params[:confirmation_token]
continue
params
continue
artist.user_confirmation_token
params
artist.user_confirmation_token == params[:confirmation_token]
artist.user
artist.uer
artist
continue
artist
params
artist.user_confirmation_token
params
@artist.user
@artist.uer
continue
params
exit
params
exit
continue
exit
continue
@test
csrf_token
continue
render 'payments/_csrf'
render partial: 'payments/csrf'
render_to_string partial: 'payments/csrf'
form_authenticity_token
self
continue
@test
continue
@test
continue
@to
csrf_token
@test
continue
self.form_authenticity_token
continue
self.form_authenticity_token
continue
self.form_authenticity_token
exit
self.form_authenticity_token
self.protect_against_forgery?
self.methods
self.form_authenticity_token
csrf_token
self.class.methods[0].methods
self.class.methods[3].methods
self.class.methods[3].method
self.class.methods[3].set
self.class.methods[3].apply
self.class.methods[3]
self.class.methods[0]
self.class.methods
self.class.methods.helper_methods
self.class.methods._helper_methods
self.class.helper_methods
self.class.methods.send
self.class.methods[:helper_methods]
self.class.methods[:_helper_methods]
self.class.methods
self
continue
self.form_authenticity_token(@token)
self.form_authenticity_token
continue
self.methods.apply
self.methods.first.apply
self.methods.first
self.methods.create_authenticity_token
self.methods
self.methods["create_authenticity_token"]
self.methods[:create_authenticity_token]
self.methods.create_authenticity_token
self.methods
create_authenticity_token
self.create_authenticity_token
self.methods
self
continue
self.form_authenticity_token
continue
self.helper
self
self.helper_methods
self.methods.protect_against_forgery?
self.methods.protect_against_forgerY?
self.methods
continue
self.form_authenticity_token
self.protect_against_forgery?
self.create_authenticity_token
continue
self.protect_against_forgery?
continue
self.confirm_artist
self.form_authenticity_token
self.methods
self
this
continue
exit
function= functions
function[:protect_against_forgery?]
function
self.swing
self.class.send(:define_method, "swing") {"test"}
self.send(:define_method, "swing") {"test"}
self.methods
self
self.metaclass
  puts "#{name}: #{sword_symbol} #{sound_effect}"
drew.metaclass.send(:define_method, 'swing') do |sound_effect|
self.happy
self.methods.push(:happy)
self.methods.push({happy: "test"})
self.methods.push({:happy: "test"})
self.methods.second
self.methods["confirm_artist"]
self.methods[:confirm_artist]
self.methods.first
self.protect_against_forgery? = function[:protect_against_forgery?]
function[:protect_against_forgery?]
function["protect_against_forgery?"]
self.protect_against_forgery? = function["protect_against_forgery?"]
self.protect_against_forgery?
self.methods
self
function
functions
continue
exit
@functions
continue
form_authenticity_token
protect_against_forgery?
form_authenticity_token
continue
self.class
self.protect_against_forgery?
self
continue
@purchases = purchased_lineitems.map{|lineitem| lineitem.item}
purchased_lineitems
continue
      .where("carts.user_id": @user.id)
      .where("carts.transaction_completed": true)
purchased_lineitems = Lineitem.joins(:cart)
Lineitem.joins(:cart).where("carts.transaction_completed": true).where("carts.user_id": @user.id)[0].ite
Lineitem.joins(:cart).where("carts.transaction_completed": true).where("carts.user_id": @user.id)[0]
Lineitem.joins(:cart).where("carts.transaction_completed": true).where("carts.user_id": @user.id)
Lineitem.joins(:cart).where("carts.transaction_completed": true).where("carts.user_id": @user.id).item
Lineitem.joins(:cart).where("carts.transaction_completed": true).where("carts.user_id": @user.id)
Lineitem.joins(:cart).where("carts.transaction_completed": true)
Lineitem.joins(:cart).where("carts.transaction_completed": true).take!
Lineitem.joins(:cart).where("cart.transaction_completed": true).take!
Lineitem.joins(:cart).where("transaction_completed": true).take!
Lineitem.joins(:cart).where("transaction_completed": true)
Lineitem.joins(:cart).first
Lineitem.joins(:cart)
Lineitem.joins(:cart).where("transaction_completed":true).first
Lineitem.joins(:cart).where("transaction_completed":true).item
Lineitem.joins(:cart).where("transaction_completed":true)
Lineitem.joins(:cart).where("transaction_completed":true)[0]
Lineitem.joins(:carts).where("transaction_completed":true)[0]
Lineitem.joins(:carts).where("transaction_completed":true)
Lineitem.joins(:carts).where("transaction_completed":true).where("user_id":@user.id)
Lineitem.joins(:carts).where("transaction_completed":true).where("user_id":@user.id).item
Lineitem.joins(:carts).where("transaction_completed":true).where("user_id":@user.id)
Lineitem.joins(:carts).where("transaction_completed":true)
Lineitem.joins(:carts)
Lineitem.join(:carts)
Lineitem
Lineitem.select.join(:carts).where("transaction_completed":true)
select(:lineitem).join(:carts).where("transaction_completed":true)
 current_user.select(:lineitem).join(:carts).where("transaction_completed":true)
 current_user.carts.where("transaction_completed":true).lineitems
 current_user.carts.where("transaction_completed":false).lineitems
 current_user.carts.where("transaction_completed":false)
 current_user.carts.where("transaction_completed":true)
@user.carts
Cart.last
exit
Cart.last
current_user.carts
 current_user.carts.where("transaction_completed":true)
 current_user.carts.where("transaction_completed":false)
 current_user.carts.where("transaction_complete":false)
 current_user.carts.where("transaction_complete":true)
@user
continue
@cart.user = current_user if current_user
current_user
@cart.user
@cart
continue
exit
current_user.carts.where("transaction_complete":true)ex
current_user.carts.where("transaction_completed":true)
current_user.carts.where("transaction_completed"=true)
current_user.carts
current_user.lineitems
current_user
continue
user
user_signed_in?
user
current_user
continue
current_user.carts.push(@cart)
current_user.carts
current_user
exit
'%.2f' % object.price
object.price
number_with_precision(object.price, :precision => 2)
object.price
self
exit
object.class.name
object.class
object
object.piece_id
continue
object.type_of
object.typeof
object.type
object
object.type
continue
params
@lineitem
exit
params
@lineitem
exit
object.artist
object.work
